bind = import("bind")
strings = import("strings")
world = import("world")

// Contains definitions for what objects contain what ore, etc
load("scripts/def/mining.ank")

bind.object(objectPredicate(keys(defs)...), func(player, object, click) {
	mineDef = defs[toInt(object.ID)]
	oreName = ""
	if mineDef.ore >= 0 {
		oreName = itemDefs[mineDef.ore].Name
	}

	if click == 1 {
		player.PlaySound("prospect")
		player.Message("You examine the rock for ores...")
		sleep(Millisecond*1280)

		if mineDef.ore < 0 {
			player.Message("You fail to find anything interesting")
			return
		}

		player.Message("This rock contains " + oreName)
		return
	}
	pickaxeDef = getPickaxeDef(player)

	if pickaxeDef.lvl < 0 || pickaxeDef.bonus < 0 {
		player.Message("You need a pickaxe to mine this rock.")
		sleep(Millisecond*1920)
		player.Message("You do not have a pickaxe which you have the mining level to use")
		return
	}
	if player.Fatigue() >= 72000 {
		// 72000 is 96 percent
		player.Message("You are too tired to mine this rock")
		return
	}
	player.PlaySound("mine")
	player.ItemBubble(ids.IRON_PICKAXE)
	player.Message("You swing your pick at the rock...")
	sleep(Millisecond*1920)

	if world.getObjectAt(object.X(), object.Y()) != object || mineDef.ore < 0 {
		// my thought is that if the pointers don't match, then someone else's mine action depleted the ore
		// and we are too late.  And if the def has the ore ID as -1 it's not a usable rock.
		player.Message("There is currently no ore available in this rock")
		return
	}

	if player.Skills().Current(MINING) >= mineDef.lvl && gatheringSuccess(mineDef.lvl, player.Skills().Current(MINING) + pickaxeDef.bonus) {
		player.Message("You manage to obtain some " + oreName)
		player.AddItem(mineDef.ore, 1)
		player.IncExp(MINING, mineDef.exp)
		rockID = object.ID
		emptyRock = world.replaceObject(object, 98)
		go runAfter(Second*mineDef.respawn, func() {
			world.replaceObject(emptyRock, rockID)
		})
		return
	}
	player.Message("You only succeed in scratching the rock")
})
